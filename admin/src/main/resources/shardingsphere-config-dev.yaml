# 数据源集合
dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://127.0.0.1:3306/link?useUnicode=true&characterEncoding=UTF-8&rewriteBatchedStatements=true&allowMultiQueries=true&serverTimezone=Asia/Shanghai
    username: root
    password: 123456

rules:
  - !SHARDING
    tables:
      tuser:
        # 真实数据节点，比如数据库源以及数据库在数据库中真实存在的
        actualDataNodes: ds_0.tuser_${0..15}
        # 分表策略
        tableStrategy:
          standard:
            # 分片键
            shardingColumn: userName
            # 分片算法，对应 rules[0].shardingAlgorithms
            shardingAlgorithmName: user_table_hash_mod
      tgroup:
        actualDataNodes: ds_0.tgroup_${0..15}
        tableStrategy:
          standard:
            shardingColumn: userName
            #不能用gid，我们查当前用户下的gid分组，其是没有gid的
            shardingAlgorithmName: group_table_hash_mod
    shardingAlgorithms:
      user_table_hash_mod:
        type: HASH_MOD
        props:
          sharding-count: 16
      group_table_hash_mod:
        type: HASH_MOD
        props:
          sharding-count: 16
  - !ENCRYPT
    tables:
      # 用户表
      tuser:
        # 用户表中哪些字段需要进行加密
        columns:
          phone:
            cipherColumn: phone
            encryptorName: common_encryptor
          mail:
            cipherColumn: mail
            encryptorName: common_encryptor
        # 是否按照密文字段查询
        queryWithCipherColumn: true
        # 假设说已有一部分数据，想要无缝加密，数据库中存在两个phone相关的字段，一个是明文，另一个是密文，
        # 前期设置成false按照明文查询，当我们实现明文字段加密为密文字段，把值清洗过去，做完之后改为true
    # 加密算法
    encryptors:
      # 自定义加密算法名称
      common_encryptor:
        # 加密算法类型
        type: AES
        props:
          # AES 加密密钥
          aes-key-value: d6oadClrrb9A3GWo
# 展现逻辑 SQL & 真实 SQL
props:
  sql-show: true